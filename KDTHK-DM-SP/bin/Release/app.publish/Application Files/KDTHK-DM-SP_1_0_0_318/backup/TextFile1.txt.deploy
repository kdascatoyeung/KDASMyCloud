internal class ListSorter : Comparer<DataList>
        {
            private readonly OLVColumn column;
            private readonly SortOrder sortOrder;

            public ListSorter(OLVColumn col, SortOrder order)
            {
                this.column = col;
                this.sortOrder = order;
            }

            public override int Compare(DataList x, DataList y)
            {
                IComparable xValue = this.column.GetValue(x) as IComparable;
                IComparable yValue = this.column.GetValue(y) as IComparable;

                int result;

                if (xValue == null || yValue == null)
                {
                    if (xValue == null && yValue == null)
                        result = 0;
                    else
                        if (xValue != null)
                            result = 1;
                        else
                            result = -1;
                }
                else
                    result = xValue.CompareTo(yValue);

                if (this.sortOrder == SortOrder.Ascending)
                    return result;

                return 0 - result;
            }
        }

        private void lvData_DoubleClick(object sender, EventArgs e)
        {
            string name = lvData.SelectedItem.SubItems[0].Text;
            string path = lvData.SelectedItem.SubItems[6].Text;
            string vpath = lvData.SelectedItem.SubItems[7].Text;
            string type = lvData.SelectedItem.SubItems[8].Text;

            if (type == "folder")
            {
                btnPrevious.Enabled = true;

                if (GlobalService.MemoryList.Count > 0)
                {
                    var item = GlobalService.MemoryList[GlobalService.MemoryList.Count - 1];

                    if (item != txtPath.Text)
                        GlobalService.MemoryList.Add(txtPath.Text);
                }
                else
                    GlobalService.MemoryList.Add(txtPath.Text);

                //this.LoadData(PopulateDataList(txtPath.Text + @"\" + name, "", ""));
            }
            else
            {
                Process.Start(path);
            }
        }

		#region
        /*private List<DataList> PopulateDataList(string sourcePath, string source, string mode)
        {
            List<DataList> list = new List<DataList>();

            string query = string.Format("select r_filename, r_lastmodified, r_owner, r_shared, r_path, r_vpath, r_count, r_favorite" +
                " from " + GlobalService.DbTable + " where r_filename like N'{0}%' and r_vpath like N'{1}%'", source, sourcePath);

            List<string> folderList = new List<string>();

            List<string> fileList = new List<string>();

            using (GlobalService.Reader = DataService.GetInstance().ExecuteReader(query))
            {
                while (GlobalService.Reader.Read())
                {
                    string fileName = GlobalService.Reader.GetString(0);
                    string modified = GlobalService.Reader.GetString(1);
                    string owner = GlobalService.Reader.GetString(2);
                    string shared = GlobalService.Reader.GetString(3);
                    string path = GlobalService.Reader.GetString(4);
                    string vpath = GlobalService.Reader.GetString(5);
                    string read = GlobalService.Reader.GetInt32(6).ToString();
                    string favorite = GlobalService.Reader.GetString(7);

                    int sharedCount = 0;

                    if(shared.Contains(";"))
                    {
                        string[] slist = shared.Split(';');
                        sharedCount = slist.Length;
                    }

                    if (sourcePath != vpath)
                    {
                        string tmpPath = vpath.Replace(sourcePath, "").Substring(1);

                        if (tmpPath.Contains(@"\"))
                        {
                            tmpPath = tmpPath.Substring(0, tmpPath.IndexOf(@"\"));

                            if (!folderList.Contains(tmpPath))
                            {
                                folderList.Add(tmpPath);
                                list.Add(new DataList { Filename = tmpPath, Modified = "", Owner = "", Shared = "", Count = "", Favorite = "", Path = "", Vpath = sourcePath + @"\" + tmpPath, Type = "folder" });
                            }
                            else
                                continue;
                        }

                        else if (folderList.Contains(tmpPath))
                            continue;

                        else
                        {
                            folderList.Add(tmpPath);
                            list.Add(new DataList { Filename = tmpPath, Modified = "", Owner = "", Shared = "", Count = "", Favorite = "", Path = "", Vpath = sourcePath + @"\" + tmpPath, Type = "folder" });
                        }
                    }
                    else
                    {
                        if (fileList.Contains(path))
                            continue;

                        fileList.Add(path);

                        list.Add(new DataList { Filename = fileName, Modified = modified, Owner = owner, Shared = sharedCount.ToString(), Count = read, Favorite = favorite, Path = path, Vpath = vpath, Type = "file" });
                    }
                }
            }

            list.Sort(delegate(DataList x, DataList y)
            {
                int a = y.Type.CompareTo(x.Type);

                if (a == 0)
                    a = x.Filename.CompareTo(y.Filename);

                return a;
            });

            return list;
        }

        private void LoadData(List<DataList> list)
        {
            this.cFile.AspectGetter = delegate(object x) { return ((DataList)x).Filename; };
            this.cFile.ImageGetter = delegate(object row)
            {
                DataList data = ((DataList)row);

                if (data.Type == "folder")
                    return 5;
                else
                {
                    if (data.Path.EndsWith("xls") || data.Path.EndsWith("xlsx") || data.Path.EndsWith("xlsm"))
                        return 0; // Excel
                    else if (data.Path.EndsWith("doc") || data.Path.EndsWith("docx"))
                        return 1;
                    else
                        return 4;
                }
            };
            this.cModified.AspectGetter = delegate(object x) { return ((DataList)x).Modified; };
            this.cOwner.AspectGetter = delegate(object x) { return ((DataList)x).Owner; };
            this.cShared.AspectGetter = delegate(object x) { return ((DataList)x).Shared; };
            this.cRead.AspectGetter = delegate(object x) { return ((DataList)x).Count; };
            this.cFavorite.AspectGetter = delegate(object x) { return ((DataList)x).Favorite; };
            this.cPath.AspectGetter = delegate(object x) { return ((DataList)x).Path; };
            this.cVpath.AspectGetter = delegate(object x) { return ((DataList)x).Vpath; };
            this.cType.AspectGetter = delegate(object x) { return ((DataList)x).Type; };

            this.lvData.SetObjects(list);
        }*/
        #endregion